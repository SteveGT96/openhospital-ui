// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs";
import {
  BaseAPI,
  HttpHeaders,
  HttpQuery,
  throwIfNullOrUndefined,
  encodeURI,
  OperationOpts,
  RawAjaxResponse,
} from "../runtime";
import { OpdDTO, OpdWithOperationRowDTO, PageOpdDTO } from "../models";

export interface DeleteOpdUsingDELETERequest {
  code: number;
}

export interface GetLastOpdUsingGETRequest {
  patientCode: number;
}

export interface GetOpdByDatesUsingGETRequest {
  dateFrom: string;
  dateTo: string;
  ageFrom?: number;
  ageTo?: number;
  diseaseCode?: string;
  diseaseTypeCode?: string;
  newPatient?: string;
  page?: number;
  patientCode?: number;
  sex?: string;
  size?: number;
  paged?: boolean;
}

export interface GetOpdByPatientUsingGETRequest {
  pcode: number;
}

export interface GetOpdToDayOrWeekUsingGETRequest {
  oneWeek?: boolean;
}

export interface GetProgYearUsingGETRequest {
  year: number;
}

export interface IsExistOpdNumUsingGETRequest {
  opdNum: number;
  year: number;
}

export interface NewOpdUsingPOSTRequest {
  opdDTO: OpdDTO;
}

export interface NewOpdWithOperationRowUsingPOSTRequest {
  opdWithOperatioRowDTO: OpdWithOperationRowDTO;
}

export interface UpdateOpdUsingPUTRequest {
  code: number;
  opdDTO: OpdDTO;
}

export interface UpdateOpdWithOperationRowUsingPUTRequest {
  code: number;
  opdWithOperatioRowDTO: OpdWithOperationRowDTO;
}

/**
 * no description
 */
export class OpdControllerApi extends BaseAPI {
  /**
   * deleteOpd
   */
  deleteOpdUsingDELETE({
    code,
  }: DeleteOpdUsingDELETERequest): Observable<boolean>;
  deleteOpdUsingDELETE(
    { code }: DeleteOpdUsingDELETERequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  deleteOpdUsingDELETE(
    { code }: DeleteOpdUsingDELETERequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(code, "code", "deleteOpdUsingDELETE");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<boolean>(
      {
        url: "/opds/{code}".replace("{code}", encodeURI(code)),
        method: "DELETE",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getLastOpd
   */
  getLastOpdUsingGET({
    patientCode,
  }: GetLastOpdUsingGETRequest): Observable<OpdDTO>;
  getLastOpdUsingGET(
    { patientCode }: GetLastOpdUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<OpdDTO>>;
  getLastOpdUsingGET(
    { patientCode }: GetLastOpdUsingGETRequest,
    opts?: OperationOpts
  ): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {
    throwIfNullOrUndefined(patientCode, "patientCode", "getLastOpdUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<OpdDTO>(
      {
        url: "/opds/last/{patientCode}".replace(
          "{patientCode}",
          encodeURI(patientCode)
        ),
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getOpdByDates
   */
  getOpdByDatesUsingGET({
    dateFrom,
    dateTo,
    ageFrom,
    ageTo,
    diseaseCode,
    diseaseTypeCode,
    newPatient,
    page,
    patientCode,
    sex,
    size,
    paged,
  }: GetOpdByDatesUsingGETRequest): Observable<PageOpdDTO>;
  getOpdByDatesUsingGET(
    {
      dateFrom,
      dateTo,
      ageFrom,
      ageTo,
      diseaseCode,
      diseaseTypeCode,
      newPatient,
      page,
      patientCode,
      sex,
      size,
      paged,
    }: GetOpdByDatesUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<PageOpdDTO>>;
  getOpdByDatesUsingGET(
    {
      dateFrom,
      dateTo,
      ageFrom,
      ageTo,
      diseaseCode,
      diseaseTypeCode,
      newPatient,
      page,
      patientCode,
      sex,
      size,
      paged,
    }: GetOpdByDatesUsingGETRequest,
    opts?: OperationOpts
  ): Observable<PageOpdDTO | RawAjaxResponse<PageOpdDTO>> {
    throwIfNullOrUndefined(dateFrom, "dateFrom", "getOpdByDatesUsingGET");
    throwIfNullOrUndefined(dateTo, "dateTo", "getOpdByDatesUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      dateFrom: dateFrom,
      dateTo: dateTo,
    };

    if (ageFrom != null) {
      query["ageFrom"] = ageFrom;
    }
    if (ageTo != null) {
      query["ageTo"] = ageTo;
    }
    if (diseaseCode != null) {
      query["diseaseCode"] = diseaseCode;
    }
    if (diseaseTypeCode != null) {
      query["diseaseTypeCode"] = diseaseTypeCode;
    }
    if (newPatient != null) {
      query["newPatient"] = newPatient;
    }
    if (page != null) {
      query["page"] = page;
    }
    if (patientCode != null) {
      query["patientCode"] = patientCode;
    }
    if (sex != null) {
      query["sex"] = sex;
    }
    if (size != null) {
      query["size"] = size;
    }
    if (paged != null) {
      query["paged"] = paged;
    }

    return this.request<PageOpdDTO>(
      {
        url: "/opds/search",
        method: "GET",
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   * getOpdByPatient
   */
  getOpdByPatientUsingGET({
    pcode,
  }: GetOpdByPatientUsingGETRequest): Observable<Array<OpdWithOperationRowDTO>>;
  getOpdByPatientUsingGET(
    { pcode }: GetOpdByPatientUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<OpdWithOperationRowDTO>>>;
  getOpdByPatientUsingGET(
    { pcode }: GetOpdByPatientUsingGETRequest,
    opts?: OperationOpts
  ): Observable<
    | Array<OpdWithOperationRowDTO>
    | RawAjaxResponse<Array<OpdWithOperationRowDTO>>
  > {
    throwIfNullOrUndefined(pcode, "pcode", "getOpdByPatientUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<Array<OpdWithOperationRowDTO>>(
      {
        url: "/opds/patient/{pcode}".replace("{pcode}", encodeURI(pcode)),
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getOpdToDayOrWeek
   */
  getOpdToDayOrWeekUsingGET({
    oneWeek,
  }: GetOpdToDayOrWeekUsingGETRequest): Observable<Array<OpdDTO>>;
  getOpdToDayOrWeekUsingGET(
    { oneWeek }: GetOpdToDayOrWeekUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<OpdDTO>>>;
  getOpdToDayOrWeekUsingGET(
    { oneWeek }: GetOpdToDayOrWeekUsingGETRequest,
    opts?: OperationOpts
  ): Observable<Array<OpdDTO> | RawAjaxResponse<Array<OpdDTO>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    const query: HttpQuery = {};

    if (oneWeek != null) {
      query["oneWeek"] = oneWeek;
    }

    return this.request<Array<OpdDTO>>(
      {
        url: "/opds/weekly",
        method: "GET",
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   * getProgYear
   */
  getProgYearUsingGET({ year }: GetProgYearUsingGETRequest): Observable<number>;
  getProgYearUsingGET(
    { year }: GetProgYearUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<number>>;
  getProgYearUsingGET(
    { year }: GetProgYearUsingGETRequest,
    opts?: OperationOpts
  ): Observable<number | RawAjaxResponse<number>> {
    throwIfNullOrUndefined(year, "year", "getProgYearUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<number>(
      {
        url: "/opds/ProgYear/{year}".replace("{year}", encodeURI(year)),
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * isExistOpdNum
   */
  isExistOpdNumUsingGET({
    opdNum,
    year,
  }: IsExistOpdNumUsingGETRequest): Observable<boolean>;
  isExistOpdNumUsingGET(
    { opdNum, year }: IsExistOpdNumUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  isExistOpdNumUsingGET(
    { opdNum, year }: IsExistOpdNumUsingGETRequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(opdNum, "opdNum", "isExistOpdNumUsingGET");
    throwIfNullOrUndefined(year, "year", "isExistOpdNumUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      opdNum: opdNum,
      year: year,
    };

    return this.request<boolean>(
      {
        url: "/opds/check/progyear",
        method: "GET",
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   * newOpd
   */
  newOpdUsingPOST({ opdDTO }: NewOpdUsingPOSTRequest): Observable<OpdDTO>;
  newOpdUsingPOST(
    { opdDTO }: NewOpdUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<OpdDTO>>;
  newOpdUsingPOST(
    { opdDTO }: NewOpdUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {
    throwIfNullOrUndefined(opdDTO, "opdDTO", "newOpdUsingPOST");

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<OpdDTO>(
      {
        url: "/opds",
        method: "POST",
        headers,
        body: opdDTO,
      },
      opts?.responseOpts
    );
  }

  /**
   * newOpdWithOperationRow
   */
  newOpdWithOperationRowUsingPOST({
    opdWithOperatioRowDTO,
  }: NewOpdWithOperationRowUsingPOSTRequest): Observable<OpdWithOperationRowDTO>;
  newOpdWithOperationRowUsingPOST(
    { opdWithOperatioRowDTO }: NewOpdWithOperationRowUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<OpdWithOperationRowDTO>>;
  newOpdWithOperationRowUsingPOST(
    { opdWithOperatioRowDTO }: NewOpdWithOperationRowUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<
    OpdWithOperationRowDTO | RawAjaxResponse<OpdWithOperationRowDTO>
  > {
    throwIfNullOrUndefined(
      opdWithOperatioRowDTO,
      "opdWithOperatioRowDTO",
      "newOpdWithOperationRowUsingPOST"
    );

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<OpdWithOperationRowDTO>(
      {
        url: "/opds/rows",
        method: "POST",
        headers,
        body: opdWithOperatioRowDTO,
      },
      opts?.responseOpts
    );
  }

  /**
   * updateOpd
   */
  updateOpdUsingPUT({
    code,
    opdDTO,
  }: UpdateOpdUsingPUTRequest): Observable<OpdDTO>;
  updateOpdUsingPUT(
    { code, opdDTO }: UpdateOpdUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<OpdDTO>>;
  updateOpdUsingPUT(
    { code, opdDTO }: UpdateOpdUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<OpdDTO | RawAjaxResponse<OpdDTO>> {
    throwIfNullOrUndefined(code, "code", "updateOpdUsingPUT");
    throwIfNullOrUndefined(opdDTO, "opdDTO", "updateOpdUsingPUT");

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<OpdDTO>(
      {
        url: "/opds/{code}".replace("{code}", encodeURI(code)),
        method: "PUT",
        headers,
        body: opdDTO,
      },
      opts?.responseOpts
    );
  }

  /**
   * updateOpdWithOperationRow
   */
  updateOpdWithOperationRowUsingPUT({
    code,
    opdWithOperatioRowDTO,
  }: UpdateOpdWithOperationRowUsingPUTRequest): Observable<OpdWithOperationRowDTO>;
  updateOpdWithOperationRowUsingPUT(
    { code, opdWithOperatioRowDTO }: UpdateOpdWithOperationRowUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<OpdWithOperationRowDTO>>;
  updateOpdWithOperationRowUsingPUT(
    { code, opdWithOperatioRowDTO }: UpdateOpdWithOperationRowUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<
    OpdWithOperationRowDTO | RawAjaxResponse<OpdWithOperationRowDTO>
  > {
    throwIfNullOrUndefined(code, "code", "updateOpdWithOperationRowUsingPUT");
    throwIfNullOrUndefined(
      opdWithOperatioRowDTO,
      "opdWithOperatioRowDTO",
      "updateOpdWithOperationRowUsingPUT"
    );

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<OpdWithOperationRowDTO>(
      {
        url: "/opds/rows/{code}".replace("{code}", encodeURI(code)),
        method: "PUT",
        headers,
        body: opdWithOperatioRowDTO,
      },
      opts?.responseOpts
    );
  }
}
