// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    LoginRequest,
    LoginResponse,
} from '../models';

export interface Login1Request {
    username: string;
    password: string;
    loginRequest: LoginRequest;
}

/**
 * no description
 */
export class LoginApi extends BaseAPI {

    /**
     * Login with the given credentials.
     */
    login1({ username, password, loginRequest }: Login1Request): Observable<LoginResponse>
    login1({ username, password, loginRequest }: Login1Request, opts?: OperationOpts): Observable<RawAjaxResponse<LoginResponse>>
    login1({ username, password, loginRequest }: Login1Request, opts?: OperationOpts): Observable<LoginResponse | RawAjaxResponse<LoginResponse>> {
        throwIfNullOrUndefined(username, 'username', 'login1');
        throwIfNullOrUndefined(password, 'password', 'login1');
        throwIfNullOrUndefined(loginRequest, 'loginRequest', 'login1');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'username': username,
            'password': password,
        };

        return this.request<LoginResponse>({
            url: '/auth/login',
            method: 'POST',
            headers,
            query,
            body: loginRequest,
        }, opts?.responseOpts);
    };

    /**
     * Logout the current user.
     */
    logout(): Observable<void>
    logout(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    logout(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/auth/logout',
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

}
