// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PricesOthersDTO,
} from '../models';

export interface DeletePricesOthersUsingDELETERequest {
    id: number;
}

export interface NewPricesOthersUsingPOSTRequest {
    pricesOthersDTO: PricesOthersDTO;
}

export interface UpdatePricesOtherstUsingPUTRequest {
    id: number;
    pricesOthersDTO: PricesOthersDTO;
}

/**
 * no description
 */
export class PricesOthersControllerApi extends BaseAPI {

    /**
     * deletePricesOthers
     */
    deletePricesOthersUsingDELETE({ id }: DeletePricesOthersUsingDELETERequest): Observable<boolean>
    deletePricesOthersUsingDELETE({ id }: DeletePricesOthersUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deletePricesOthersUsingDELETE({ id }: DeletePricesOthersUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(id, 'id', 'deletePricesOthersUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/pricesothers/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getPricesOtherss
     */
    getPricesOtherssUsingGET(): Observable<Array<PricesOthersDTO>>
    getPricesOtherssUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PricesOthersDTO>>>
    getPricesOtherssUsingGET(opts?: OperationOpts): Observable<Array<PricesOthersDTO> | RawAjaxResponse<Array<PricesOthersDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<PricesOthersDTO>>({
            url: '/pricesothers',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newPricesOthers
     */
    newPricesOthersUsingPOST({ pricesOthersDTO }: NewPricesOthersUsingPOSTRequest): Observable<PricesOthersDTO>
    newPricesOthersUsingPOST({ pricesOthersDTO }: NewPricesOthersUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PricesOthersDTO>>
    newPricesOthersUsingPOST({ pricesOthersDTO }: NewPricesOthersUsingPOSTRequest, opts?: OperationOpts): Observable<PricesOthersDTO | RawAjaxResponse<PricesOthersDTO>> {
        throwIfNullOrUndefined(pricesOthersDTO, 'pricesOthersDTO', 'newPricesOthersUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PricesOthersDTO>({
            url: '/pricesothers',
            method: 'POST',
            headers,
            body: pricesOthersDTO,
        }, opts?.responseOpts);
    };

    /**
     * updatePricesOtherst
     */
    updatePricesOtherstUsingPUT({ id, pricesOthersDTO }: UpdatePricesOtherstUsingPUTRequest): Observable<PricesOthersDTO>
    updatePricesOtherstUsingPUT({ id, pricesOthersDTO }: UpdatePricesOtherstUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PricesOthersDTO>>
    updatePricesOtherstUsingPUT({ id, pricesOthersDTO }: UpdatePricesOtherstUsingPUTRequest, opts?: OperationOpts): Observable<PricesOthersDTO | RawAjaxResponse<PricesOthersDTO>> {
        throwIfNullOrUndefined(id, 'id', 'updatePricesOtherstUsingPUT');
        throwIfNullOrUndefined(pricesOthersDTO, 'pricesOthersDTO', 'updatePricesOtherstUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<PricesOthersDTO>({
            url: '/pricesothers/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: pricesOthersDTO,
        }, opts?.responseOpts);
    };

}
