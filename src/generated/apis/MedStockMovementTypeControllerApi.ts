// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    MovementTypeDTO,
} from '../models';

export interface DeleteMedicalDsrStockMovementTypeUsingDELETERequest {
    code: string;
}

export interface GetMovementTypeUsingGETRequest {
    code: string;
}

export interface IsCodeUsedUsingGETRequest {
    code: string;
}

export interface NewMedicalDsrStockMovementTypeUsingPOSTRequest {
    medicalDsrStockMovementType: MovementTypeDTO;
}

export interface UpdateMedicalDsrStockMovementTypeUsingPUTRequest {
    medicalDsrStockMovementTypeDTO: MovementTypeDTO;
}

/**
 * no description
 */
export class MedStockMovementTypeControllerApi extends BaseAPI {

    /**
     * deleteMedicalDsrStockMovementType
     */
    deleteMedicalDsrStockMovementTypeUsingDELETE({ code }: DeleteMedicalDsrStockMovementTypeUsingDELETERequest): Observable<boolean>
    deleteMedicalDsrStockMovementTypeUsingDELETE({ code }: DeleteMedicalDsrStockMovementTypeUsingDELETERequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    deleteMedicalDsrStockMovementTypeUsingDELETE({ code }: DeleteMedicalDsrStockMovementTypeUsingDELETERequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'deleteMedicalDsrStockMovementTypeUsingDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/medstockmovementtype/{code}'.replace('{code}', encodeURI(code)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getMedicalDsrStockMovementType
     */
    getMedicalDsrStockMovementTypeUsingGET(): Observable<Array<MovementTypeDTO>>
    getMedicalDsrStockMovementTypeUsingGET(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MovementTypeDTO>>>
    getMedicalDsrStockMovementTypeUsingGET(opts?: OperationOpts): Observable<Array<MovementTypeDTO> | RawAjaxResponse<Array<MovementTypeDTO>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<Array<MovementTypeDTO>>({
            url: '/medstockmovementtype',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * getMovementType
     */
    getMovementTypeUsingGET({ code }: GetMovementTypeUsingGETRequest): Observable<MovementTypeDTO>
    getMovementTypeUsingGET({ code }: GetMovementTypeUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MovementTypeDTO>>
    getMovementTypeUsingGET({ code }: GetMovementTypeUsingGETRequest, opts?: OperationOpts): Observable<MovementTypeDTO | RawAjaxResponse<MovementTypeDTO>> {
        throwIfNullOrUndefined(code, 'code', 'getMovementTypeUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<MovementTypeDTO>({
            url: '/medstockmovementtype/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * isCodeUsed
     */
    isCodeUsedUsingGET({ code }: IsCodeUsedUsingGETRequest): Observable<boolean>
    isCodeUsedUsingGET({ code }: IsCodeUsedUsingGETRequest, opts?: OperationOpts): Observable<RawAjaxResponse<boolean>>
    isCodeUsedUsingGET({ code }: IsCodeUsedUsingGETRequest, opts?: OperationOpts): Observable<boolean | RawAjaxResponse<boolean>> {
        throwIfNullOrUndefined(code, 'code', 'isCodeUsedUsingGET');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<boolean>({
            url: '/medstockmovementtype/check/{code}'.replace('{code}', encodeURI(code)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * newMedicalDsrStockMovementType
     */
    newMedicalDsrStockMovementTypeUsingPOST({ medicalDsrStockMovementType }: NewMedicalDsrStockMovementTypeUsingPOSTRequest): Observable<MovementTypeDTO>
    newMedicalDsrStockMovementTypeUsingPOST({ medicalDsrStockMovementType }: NewMedicalDsrStockMovementTypeUsingPOSTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MovementTypeDTO>>
    newMedicalDsrStockMovementTypeUsingPOST({ medicalDsrStockMovementType }: NewMedicalDsrStockMovementTypeUsingPOSTRequest, opts?: OperationOpts): Observable<MovementTypeDTO | RawAjaxResponse<MovementTypeDTO>> {
        throwIfNullOrUndefined(medicalDsrStockMovementType, 'medicalDsrStockMovementType', 'newMedicalDsrStockMovementTypeUsingPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<MovementTypeDTO>({
            url: '/medstockmovementtype',
            method: 'POST',
            headers,
            body: medicalDsrStockMovementType,
        }, opts?.responseOpts);
    };

    /**
     * updateMedicalDsrStockMovementType
     */
    updateMedicalDsrStockMovementTypeUsingPUT({ medicalDsrStockMovementTypeDTO }: UpdateMedicalDsrStockMovementTypeUsingPUTRequest): Observable<MovementTypeDTO>
    updateMedicalDsrStockMovementTypeUsingPUT({ medicalDsrStockMovementTypeDTO }: UpdateMedicalDsrStockMovementTypeUsingPUTRequest, opts?: OperationOpts): Observable<RawAjaxResponse<MovementTypeDTO>>
    updateMedicalDsrStockMovementTypeUsingPUT({ medicalDsrStockMovementTypeDTO }: UpdateMedicalDsrStockMovementTypeUsingPUTRequest, opts?: OperationOpts): Observable<MovementTypeDTO | RawAjaxResponse<MovementTypeDTO>> {
        throwIfNullOrUndefined(medicalDsrStockMovementTypeDTO, 'medicalDsrStockMovementTypeDTO', 'updateMedicalDsrStockMovementTypeUsingPUT');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'Authorization': this.configuration.apiKey('Authorization') }), // JWT authentication
        };

        return this.request<MovementTypeDTO>({
            url: '/medstockmovementtype',
            method: 'PUT',
            headers,
            body: medicalDsrStockMovementTypeDTO,
        }, opts?.responseOpts);
    };

}
