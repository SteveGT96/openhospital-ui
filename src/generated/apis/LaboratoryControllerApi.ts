// tslint:disable
/**
 * OH 2.0 Api Documentation
 * OH 2.0 Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs";
import {
  BaseAPI,
  HttpHeaders,
  HttpQuery,
  throwIfNullOrUndefined,
  encodeURI,
  OperationOpts,
  RawAjaxResponse,
} from "../runtime";
import { LabWithRowsDTO, LaboratoryDTO, PageLabWithRowsDTO } from "../models";

export interface DeleteExamRequestUsingDELETERequest {
  code: number;
}

export interface DeleteExamRequestUsingDELETERequest {
  code: number;
}

export interface DeleteExamUsingDELETE2Request {
  code: number;
}

export interface GetExamByIdUsingGETRequest {
  code: number;
}

export interface GetExamWithRowsByIdUsingGETRequest {
  code: number;
}

export interface GetLaboratoryExamRequestUsingGET1Request {
  patId: number;
}

export interface GetLaboratoryExamRequestUsingGET1Request {
  patId: number;
}

export interface GetLaboratoryForPrintUsingGETRequest {
  dateFrom: string;
  dateTo: string;
  examName?: string;
  patientCode?: number;
  status?: string;
  paged?: boolean;
  page?: number;
  size?: number;
}

export interface GetLaboratoryUsingGETRequest {
  patId: number;
}

export interface GetLaboratoryUsingGET1Request {
  oneWeek: boolean;
  pageNo: number;
  pageSize: number;
}

export interface NewExamRequestUsingPOSTRequest {
  laboratoryDTO: LaboratoryDTO;
}

export interface NewExamRequestUsingPOSTRequest {
  laboratoryDTO: LaboratoryDTO;
}

export interface NewLaboratory2UsingPOSTRequest {
  labsWithRows: Array<LabWithRowsDTO>;
}

export interface NewLaboratoryUsingPOSTRequest {
  labWithRowsDTO: LabWithRowsDTO;
}

export interface UpdateExamRequestUsingPUTRequest {
  code: number;
  status: string;
}

export interface UpdateExamRequestUsingPUTRequest {
  code: number;
  status: string;
}

export interface UpdateLaboratoryUsingPUTRequest {
  code: number;
  labWithRowsDTO: LabWithRowsDTO;
}

/**
 * no description
 */
export class LaboratoryControllerApi extends BaseAPI {
  /**
   * deleteExamRequest
   */
  deleteExamRequestUsingDELETE({
    code,
  }: DeleteExamRequestUsingDELETERequest): Observable<boolean>;
  deleteExamRequestUsingDELETE(
    { code }: DeleteExamRequestUsingDELETERequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  deleteExamRequestUsingDELETE(
    { code }: DeleteExamRequestUsingDELETERequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(code, "code", "deleteExamRequestUsingDELETE");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<boolean>(
      {
        url: "/laboratories/examRequest/{code}".replace(
          "{code}",
          encodeURI(code)
        ),
        method: "DELETE",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * deleteExam
   */
  deleteExamUsingDELETE2({
    code,
  }: DeleteExamUsingDELETE2Request): Observable<boolean>;
  deleteExamUsingDELETE2(
    { code }: DeleteExamUsingDELETE2Request,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  deleteExamUsingDELETE2(
    { code }: DeleteExamUsingDELETE2Request,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(code, "code", "deleteExamUsingDELETE2");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<boolean>(
      {
        url: "/laboratories/{code}".replace("{code}", encodeURI(code)),
        method: "DELETE",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getExamById
   */
  getExamByIdUsingGET({
    code,
  }: GetExamByIdUsingGETRequest): Observable<LaboratoryDTO>;
  getExamByIdUsingGET(
    { code }: GetExamByIdUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<LaboratoryDTO>>;
  getExamByIdUsingGET(
    { code }: GetExamByIdUsingGETRequest,
    opts?: OperationOpts
  ): Observable<LaboratoryDTO | RawAjaxResponse<LaboratoryDTO>> {
    throwIfNullOrUndefined(code, "code", "getExamByIdUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<LaboratoryDTO>(
      {
        url: "/laboratories/{code}".replace("{code}", encodeURI(code)),
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getExamWithRowsById
   */
  getExamWithRowsByIdUsingGET({
    code,
  }: GetExamWithRowsByIdUsingGETRequest): Observable<LabWithRowsDTO>;
  getExamWithRowsByIdUsingGET(
    { code }: GetExamWithRowsByIdUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<LabWithRowsDTO>>;
  getExamWithRowsByIdUsingGET(
    { code }: GetExamWithRowsByIdUsingGETRequest,
    opts?: OperationOpts
  ): Observable<LabWithRowsDTO | RawAjaxResponse<LabWithRowsDTO>> {
    throwIfNullOrUndefined(code, "code", "getExamWithRowsByIdUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<LabWithRowsDTO>(
      {
        url: "/laboratories/exams/{code}".replace("{code}", encodeURI(code)),
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getLaboratoryExamRequest
   */
  getLaboratoryExamRequestUsingGET(): Observable<Array<LaboratoryDTO>>;
  getLaboratoryExamRequestUsingGET(
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<LaboratoryDTO>>>;
  getLaboratoryExamRequestUsingGET(
    opts?: OperationOpts
  ): Observable<Array<LaboratoryDTO> | RawAjaxResponse<Array<LaboratoryDTO>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<Array<LaboratoryDTO>>(
      {
        url: "/laboratories/examRequest",
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getLaboratoryExamRequest
   */
  getLaboratoryExamRequestUsingGET1({
    patId,
  }: GetLaboratoryExamRequestUsingGET1Request): Observable<
    Array<LaboratoryDTO>
  >;
  getLaboratoryExamRequestUsingGET1(
    { patId }: GetLaboratoryExamRequestUsingGET1Request,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<LaboratoryDTO>>>;
  getLaboratoryExamRequestUsingGET1(
    { patId }: GetLaboratoryExamRequestUsingGET1Request,
    opts?: OperationOpts
  ): Observable<Array<LaboratoryDTO> | RawAjaxResponse<Array<LaboratoryDTO>>> {
    throwIfNullOrUndefined(patId, "patId", "getLaboratoryExamRequestUsingGET1");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<Array<LaboratoryDTO>>(
      {
        url: "/laboratories/examRequest/patient/{patId}".replace(
          "{patId}",
          encodeURI(patId)
        ),
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getLaboratoryForPrint
   */
  getLaboratoryForPrintUsingGET({
    dateFrom,
    dateTo,
    examName,
    patientCode,
    status,
    paged,
    page,
    size,
  }: GetLaboratoryForPrintUsingGETRequest): Observable<
    Array<PageLabWithRowsDTO>
  >;
  getLaboratoryForPrintUsingGET(
    {
      dateFrom,
      dateTo,
      examName,
      patientCode,
      status,
      paged,
      page,
      size,
    }: GetLaboratoryForPrintUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<PageLabWithRowsDTO>>>;
  getLaboratoryForPrintUsingGET(
    {
      dateFrom,
      dateTo,
      examName,
      patientCode,
      status,
      paged,
      page,
      size,
    }: GetLaboratoryForPrintUsingGETRequest,
    opts?: OperationOpts
  ): Observable<
    Array<PageLabWithRowsDTO> | RawAjaxResponse<Array<PageLabWithRowsDTO>>
  > {
    throwIfNullOrUndefined(
      dateFrom,
      "dateFrom",
      "getLaboratoryForPrintUsingGET"
    );
    throwIfNullOrUndefined(dateTo, "dateTo", "getLaboratoryForPrintUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      dateFrom: dateFrom,
      dateTo: dateTo,
    };

    if (examName != null) {
      query["examName"] = examName;
    }
    if (patientCode != null) {
      query["patientCode"] = patientCode;
    }
    if (status != null) {
      query["status"] = status;
    }
    if (paged != null) {
      query["paged"] = paged;
    }
    if (page != null) {
      query["page"] = page;
    }
    if (size != null) {
      query["size"] = size;
    }

    return this.request<Array<PageLabWithRowsDTO>>(
      {
        url: "/laboratories/exams",
        method: "GET",
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   * getLaboratory
   */
  getLaboratoryUsingGET({
    patId,
  }: GetLaboratoryUsingGETRequest): Observable<Array<LabWithRowsDTO>>;
  getLaboratoryUsingGET(
    { patId }: GetLaboratoryUsingGETRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<LabWithRowsDTO>>>;
  getLaboratoryUsingGET(
    { patId }: GetLaboratoryUsingGETRequest,
    opts?: OperationOpts
  ): Observable<
    Array<LabWithRowsDTO> | RawAjaxResponse<Array<LabWithRowsDTO>>
  > {
    throwIfNullOrUndefined(patId, "patId", "getLaboratoryUsingGET");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<Array<LabWithRowsDTO>>(
      {
        url: "/laboratories/byPatientId/{patId}".replace(
          "{patId}",
          encodeURI(patId)
        ),
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * getLaboratory
   */
  getLaboratoryUsingGET1({
    oneWeek,
    pageNo,
    pageSize,
  }: GetLaboratoryUsingGET1Request): Observable<PageLabWithRowsDTO>;
  getLaboratoryUsingGET1(
    { oneWeek, pageNo, pageSize }: GetLaboratoryUsingGET1Request,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<PageLabWithRowsDTO>>;
  getLaboratoryUsingGET1(
    { oneWeek, pageNo, pageSize }: GetLaboratoryUsingGET1Request,
    opts?: OperationOpts
  ): Observable<PageLabWithRowsDTO | RawAjaxResponse<PageLabWithRowsDTO>> {
    throwIfNullOrUndefined(oneWeek, "oneWeek", "getLaboratoryUsingGET1");
    throwIfNullOrUndefined(pageNo, "pageNo", "getLaboratoryUsingGET1");
    throwIfNullOrUndefined(pageSize, "pageSize", "getLaboratoryUsingGET1");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      oneWeek: oneWeek,
      pageNo: pageNo,
      pageSize: pageSize,
    };

    return this.request<PageLabWithRowsDTO>(
      {
        url: "/laboratories",
        method: "GET",
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   * getMaterials
   */
  getMaterialsUsingGET(): Observable<Array<string>>;
  getMaterialsUsingGET(
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<string>>>;
  getMaterialsUsingGET(
    opts?: OperationOpts
  ): Observable<Array<string> | RawAjaxResponse<Array<string>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<Array<string>>(
      {
        url: "/laboratories/materials",
        method: "GET",
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   * newExamRequest
   */
  newExamRequestUsingPOST({
    laboratoryDTO,
  }: NewExamRequestUsingPOSTRequest): Observable<boolean>;
  newExamRequestUsingPOST(
    { laboratoryDTO }: NewExamRequestUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  newExamRequestUsingPOST(
    { laboratoryDTO }: NewExamRequestUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(
      laboratoryDTO,
      "laboratoryDTO",
      "newExamRequestUsingPOST"
    );

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<boolean>(
      {
        url: "/laboratories/examRequest",
        method: "POST",
        headers,
        body: laboratoryDTO,
      },
      opts?.responseOpts
    );
  }

  /**
   * newLaboratory2
   */
  newLaboratory2UsingPOST({
    labsWithRows,
  }: NewLaboratory2UsingPOSTRequest): Observable<boolean>;
  newLaboratory2UsingPOST(
    { labsWithRows }: NewLaboratory2UsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  newLaboratory2UsingPOST(
    { labsWithRows }: NewLaboratory2UsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(
      labsWithRows,
      "labsWithRows",
      "newLaboratory2UsingPOST"
    );

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<boolean>(
      {
        url: "/laboratories/insertList",
        method: "POST",
        headers,
        body: labsWithRows,
      },
      opts?.responseOpts
    );
  }

  /**
   * newLaboratory
   */
  newLaboratoryUsingPOST({
    labWithRowsDTO,
  }: NewLaboratoryUsingPOSTRequest): Observable<boolean>;
  newLaboratoryUsingPOST(
    { labWithRowsDTO }: NewLaboratoryUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  newLaboratoryUsingPOST(
    { labWithRowsDTO }: NewLaboratoryUsingPOSTRequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(
      labWithRowsDTO,
      "labWithRowsDTO",
      "newLaboratoryUsingPOST"
    );

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<boolean>(
      {
        url: "/laboratories",
        method: "POST",
        headers,
        body: labWithRowsDTO,
      },
      opts?.responseOpts
    );
  }

  /**
   * updateExamRequest
   */
  updateExamRequestUsingPUT({
    code,
    status,
  }: UpdateExamRequestUsingPUTRequest): Observable<boolean>;
  updateExamRequestUsingPUT(
    { code, status }: UpdateExamRequestUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  updateExamRequestUsingPUT(
    { code, status }: UpdateExamRequestUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(code, "code", "updateExamRequestUsingPUT");
    throwIfNullOrUndefined(status, "status", "updateExamRequestUsingPUT");

    const headers: HttpHeaders = {
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    const query: HttpQuery = {
      // required parameters are used directly since they are already checked by throwIfNullOrUndefined
      status: status,
    };

    return this.request<boolean>(
      {
        url: "/laboratories/examRequest/{code}".replace(
          "{code}",
          encodeURI(code)
        ),
        method: "PUT",
        headers,
        query,
      },
      opts?.responseOpts
    );
  }

  /**
   * updateLaboratory
   */
  updateLaboratoryUsingPUT({
    code,
    labWithRowsDTO,
  }: UpdateLaboratoryUsingPUTRequest): Observable<boolean>;
  updateLaboratoryUsingPUT(
    { code, labWithRowsDTO }: UpdateLaboratoryUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<boolean>>;
  updateLaboratoryUsingPUT(
    { code, labWithRowsDTO }: UpdateLaboratoryUsingPUTRequest,
    opts?: OperationOpts
  ): Observable<boolean | RawAjaxResponse<boolean>> {
    throwIfNullOrUndefined(code, "code", "updateLaboratoryUsingPUT");
    throwIfNullOrUndefined(
      labWithRowsDTO,
      "labWithRowsDTO",
      "updateLaboratoryUsingPUT"
    );

    const headers: HttpHeaders = {
      "Content-Type": "application/json",
      ...(this.configuration.apiKey && {
        Authorization: this.configuration.apiKey("Authorization"),
      }), // JWT authentication
    };

    return this.request<boolean>(
      {
        url: "/laboratories/{code}".replace("{code}", encodeURI(code)),
        method: "PUT",
        headers,
        body: labWithRowsDTO,
      },
      opts?.responseOpts
    );
  }
}
